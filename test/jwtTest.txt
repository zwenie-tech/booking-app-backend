// src/domain/interfaces/ITokenService.ts
export interface ITokenService {
    generateAccessToken(userId: string): Promise<string>;
    generateRefreshToken(userId: string): Promise<string>;
    verifyAccessToken(token: string): Promise<string | null>;
    verifyRefreshToken(token: string): Promise<string | null>;
    revokeRefreshToken(userId: string): Promise<void>;
  }
  
  // src/domain/interfaces/ITokenRepository.ts
  export interface ITokenRepository {
    storeRefreshToken(userId: string, token: string): Promise<void>;
    getRefreshToken(userId: string): Promise<string | null>;
    deleteRefreshToken(userId: string): Promise<void>;
  }
  
  // src/infrastructure/repositories/TokenRepository.ts
  import { PrismaClient } from '@prisma/client';
  import { ITokenRepository } from '../../domain/interfaces/ITokenRepository';
  
  export class TokenRepository implements ITokenRepository {
    private prisma: PrismaClient;
  
    constructor() {
      this.prisma = new PrismaClient();
    }
  
    async storeRefreshToken(userId: string, token: string): Promise<void> {
      await this.prisma.refreshToken.create({
        data: {
          userId,
          token,
          createdAt: new Date(),
          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 days
        }
      });
    }
  
    async getRefreshToken(userId: string): Promise<string | null> {
      const tokenRecord = await this.prisma.refreshToken.findUnique({
        where: { userId }
      });
      return tokenRecord ? tokenRecord.token : null;
    }
  
    async deleteRefreshToken(userId: string): Promise<void> {
      await this.prisma.refreshToken.deleteMany({
        where: { userId }
      });
    }
  }
  
  // src/infrastructure/services/TokenService.ts
  import jwt from 'jsonwebtoken';
  import { ITokenService } from '../../domain/interfaces/ITokenService';
  import { ITokenRepository } from '../../domain/interfaces/ITokenRepository';
  
  export class TokenService implements ITokenService {
    constructor(private tokenRepository: ITokenRepository) {}
  
    private generateToken(
      userId: string, 
      type: 'access' | 'refresh'
    ): string {
      const secret = type === 'access' 
        ? process.env.ACCESS_TOKEN_SECRET! 
        : process.env.REFRESH_TOKEN_SECRET!;
      
      const expiresIn = type === 'access' 
        ? '15m'  // Access token expires in 15 minutes
        : '7d';  // Refresh token expires in 7 days
  
      return jwt.sign({ userId }, secret, { expiresIn });
    }
  
    async generateAccessToken(userId: string): Promise<string> {
      return this.generateToken(userId, 'access');
    }
  
    async generateRefreshToken(userId: string): Promise<string> {
      const token = this.generateToken(userId, 'refresh');
      
      // Store refresh token in repository
      await this.tokenRepository.storeRefreshToken(userId, token);
      
      return token;
    }
  
    async verifyAccessToken(token: string): Promise<string | null> {
      try {
        const decoded = jwt.verify(
          token, 
          process.env.ACCESS_TOKEN_SECRET!
        ) as { userId: string };
        return decoded.userId;
      } catch {
        return null;
      }
    }
  
    async verifyRefreshToken(token: string): Promise<string | null> {
      try {
        const decoded = jwt.verify(
          token, 
          process.env.REFRESH_TOKEN_SECRET!
        ) as { userId: string };
        return decoded.userId;
      } catch {
        return null;
      }
    }
  
    async revokeRefreshToken(userId: string): Promise<void> {
      await this.tokenRepository.deleteRefreshToken(userId);
    }
  }
  
  // src/application/useCases/AuthUseCase.ts
  export class AuthUseCase {
    constructor(
      private tokenService: ITokenService
    ) {}
  
    async login(userId: string) {
      const accessToken = await this.tokenService.generateAccessToken(userId);
      const refreshToken = await this.tokenService.generateRefreshToken(userId);
  
      return {
        accessToken,
        refreshToken
      };
    }
  
    async refreshTokens(currentRefreshToken: string) {
      // Verify the current refresh token
      const userId = await this.tokenService.verifyRefreshToken(currentRefreshToken);
      
      if (!userId) {
        throw new Error('Invalid refresh token');
      }
  
      // Revoke the old refresh token and generate new tokens
      await this.tokenService.revokeRefreshToken(userId);
      
      const newAccessToken = await this.tokenService.generateAccessToken(userId);
      const newRefreshToken = await this.tokenService.generateRefreshToken(userId);
  
      return {
        accessToken: newAccessToken,
        refreshToken: newRefreshToken
      };
    }
  
    async logout(userId: string) {
      await this.tokenService.revokeRefreshToken(userId);
    }
  }
  
  // Example middleware for token verification
  // src/infrastructure/middleware/authMiddleware.ts
  import { Request, Response, NextFunction } from 'express';
  
  export const authenticateToken = async (
    req: Request, 
    res: Response, 
    next: NextFunction
  ) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
  
    if (!token) {
      return res.sendStatus(401);
    }
  
    const tokenService = new TokenService(new TokenRepository());
    const userId = await tokenService.verifyAccessToken(token);
  
    if (!userId) {
      return res.sendStatus(403);
    }
  
    // Attach user ID to the request for further use
    req.userId = userId;
    next();
  };
  
  // .env configuration example
  // ACCESS_TOKEN_SECRET=your_very_long_and_secure_random_string
  // REFRESH_TOKEN_SECRET=another_different_very_long_and_secure_random_string

// nodemailer template 
const nodemailer = require('nodemailer');

// Create transporter (configure with your email service)
const transporter = nodemailer.createTransport({
    service: 'gmail', // or your email service
    auth: {
        user: 'your-email@gmail.com',
        pass: 'your-app-specific-password'
    }
});

// Function to generate OTP
function generateOTP() {
    return Math.floor(100000 + Math.random() * 900000);
}

// Function to send OTP email
async function sendOTPEmail(userEmail) {
    const otp = generateOTP();
    
    // Email HTML template
    const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Password Reset OTP</title>
            <style>
                .container {
                    max-width: 600px;
                    margin: 0 auto;
                    padding: 20px;
                    font-family: Arial, sans-serif;
                }
                .header {
                    background-color: #4CAF50;
                    color: white;
                    padding: 20px;
                    text-align: center;
                    border-radius: 5px 5px 0 0;
                }
                .content {
                    background-color: #f9f9f9;
                    padding: 20px;
                    border: 1px solid #ddd;
                    border-radius: 0 0 5px 5px;
                }
                .otp-container {
                    text-align: center;
                    padding: 20px;
                    margin: 20px 0;
                    background-color: #ffffff;
                    border: 2px dashed #4CAF50;
                    border-radius: 5px;
                }
                .otp-code {
                    font-size: 32px;
                    font-weight: bold;
                    color: #4CAF50;
                    letter-spacing: 5px;
                }
                .footer {
                    text-align: center;
                    margin-top: 20px;
                    color: #666;
                    font-size: 12px;
                }
                .warning {
                    color: #ff4444;
                    font-size: 14px;
                    margin-top: 20px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>Password Reset Request</h1>
                </div>
                <div class="content">
                    <p>Hello,</p>
                    <p>We received a request to reset your password. Please use the following OTP (One-Time Password) to proceed with your password reset:</p>
                    
                    <div class="otp-container">
                        <div class="otp-code">${otp}</div>
                    </div>
                    
                    <p>This OTP will expire in 10 minutes for security reasons.</p>
                    
                    <p class="warning">If you didn't request this password reset, please ignore this email or contact support if you have concerns.</p>
                    
                    <div class="footer">
                        <p>This is an automated message, please do not reply to this email.</p>
                        <p>&copy; ${new Date().getFullYear()} Your Company Name. All rights reserved.</p>
                    </div>
                </div>
            </div>
        </body>
        </html>
    `;

    // Email options
    const mailOptions = {
        from: 'your-email@gmail.com',
        to: userEmail,
        subject: 'Password Reset OTP',
        html: htmlContent
    };

    try {
        // Send email
        const info = await transporter.sendMail(mailOptions);
        console.log('Email sent: ' + info.response);
        return { success: true, otp };
    } catch (error) {
        console.error('Error sending email:', error);
        throw error;
    }
}

// Example usage
module.exports = sendOTPEmail;