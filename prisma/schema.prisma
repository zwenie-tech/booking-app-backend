// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventType {
  public
  private
  inviteOnly
}

enum EventStatus {
  draft
  published
  cancelled
}

enum EventMode {
  online
  offline
}

model User {
  id            Int             @id  @default(autoincrement())
  firstName     String
  lastName      String?
  email         String          @unique
  phone         String?         @unique
  profile       String?
  password      String
  isDeleted     Boolean         @default(false)
  deletedDate   DateTime?
  isVerified    Boolean         @default(false)
  createAt      DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id            Int             @id @default(autoincrement())
  token         String          @unique
  userId        Int
  createdAt     DateTime        @default(now())
  expiresAt     DateTime
  user          User            @relation(fields: [userId], references: [id])
}

model Host {
  id            Int             @id @default(autoincrement())
  firstName     String
  lastName      String?
  email         String          @unique
  phone         String?         @unique
  profile       String?
  org_id        Int?
  role          String          @default("admin")
  isDeleted     Boolean         @default(false)
  deletedDate   DateTime?
  password      String
  isVerified    Boolean         @default(false)
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  refreshTokens RefreshTokenHost[]
  organizer     Organizer?      @relation(fields: [org_id], references: [id])
}

model RefreshTokenHost {
  id            Int             @id @default(autoincrement())
  token         String          @unique
  hostId        Int
  createdAt     DateTime        @default(now())
  expiresAt     DateTime
  host          Host            @relation(fields: [hostId], references: [id])
}

model Organizer {
  id            Int             @id @default(autoincrement())
  name          String
  address       String
  website       String?
  logo          String?
  about         String
  facebook      String?
  instagram     String?
  twitter       String?
  hosts         Host[]
  events        Event[]
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
}

model Event {
  id               Int            @id @default(autoincrement())
  orgId            Int
  name             String
  shortDescription String
  startDate        DateTime
  endDate          DateTime
  type             EventType      @default(public)
  status           EventStatus    @default(draft)
  mode             EventMode      @default(offline)
  categoryId       Int
  subCategory      String?
  description      String
  location         String
  address          String
  meetLink         String?
  artists          Artist[]
  tickets          Ticket[]
  coverPhoto       String
  eventImages      EventGallery[]
  updatedAt        DateTime        @updatedAt
  createdAt        DateTime        @default(now())
  organizer        Organizer       @relation(fields: [orgId], references: [id])
  category         Category        @relation(fields: [categoryId], references: [id])
}

model Artist {
  id               Int             @id @default(autoincrement())
  name             String
  eventId          Int
  tag              String
  profile          String?
  updatedAt        DateTime        @updatedAt
  createdAt        DateTime        @default(now())
  event            Event           @relation(fields: [eventId], references: [id])
}

model Ticket {
  id               Int             @id @default(autoincrement())
  eventId          Int
  name             String
  price            Float
  isLimited        Boolean         @default(true)
  totalSeat        Int?
  salesStartDate   DateTime
  salesEndDate     DateTime
  message          String
  updatedAt        DateTime        @updatedAt
  createdAt        DateTime        @default(now())
  event            Event           @relation(fields: [eventId], references: [id])
}

model Category {
  id               Int @id @default(autoincrement())
  name             String
  events           Event[]
  subCategory      SubCategory[]
  iconUrl          String
  color            String
  updatedAt        DateTime        @updatedAt
  createdAt        DateTime        @default(now())
}

model SubCategory {
  id               Int             @id @default(autoincrement())
  name             String
  categoryId       Int
  updatedAt        DateTime        @updatedAt
  createdAt        DateTime        @default(now())
  category         Category        @relation(fields: [categoryId], references: [id])
}

model EventGallery {
  id              Int              @id @default(autoincrement())
  eventId         Int
  imageUrl        String
  updatedAt       DateTime         @updatedAt
  createdAt       DateTime         @default(now())
  event           Event            @relation(fields: [eventId], references: [id])
}